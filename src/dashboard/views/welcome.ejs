<%- include('partials/header') %>

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Welcome Message Configuration</h1>
        <a href="/dashboard" class="text-gray-400 hover:text-white transition-colors">
            <i class="fas fa-arrow-left mr-2"></i>
            Back to Dashboard
        </a>
    </div>

    <div class="bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
        <form id="welcomeForm" class="space-y-6">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            
            <!-- Welcome Channel Selection -->
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">
                    Welcome Channel
                </label>
                <select name="welcomeChannel" class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-white">
                    <option value="">Select a channel</option>
                    <% if (guild && guild.channels) { %>
                        <% guild.channels.cache.filter(channel => channel.type === 0 || channel.type === 'GUILD_TEXT').forEach(channel => { %>
                            <option value="<%= channel.id %>" <%= guildSettings.welcomeChannel === channel.id ? 'selected' : '' %>>
                                #<%= channel.name %>
                            </option>
                        <% }); %>
                    <% } %>
                </select>
                <p class="mt-1 text-xs text-gray-400">Channel where welcome messages will be sent</p>
            </div>

            <!-- Auto Role Selection -->
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">
                    Auto Role
                </label>
                <select name="autoRole" class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-white">
                    <option value="">Select a role</option>
                    <% if (guild && guild.roles) { %>
                        <% guild.roles.cache.filter(role => role.id !== guild.id && !role.managed).forEach(role => { %>
                            <option value="<%= role.id %>" <%= guildSettings.autoRole === role.id ? 'selected' : '' %>>
                                <%= role.name %>
                            </option>
                        <% }); %>
                    <% } %>
                </select>
                <p class="mt-1 text-xs text-gray-400">Role automatically assigned to new members</p>
            </div>

            <!-- Welcome Message Preview -->
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">
                    Message Preview
                </label>
                <div class="bg-gray-700 rounded-lg p-4">
                    <div class="flex items-start space-x-4">
                        <div class="flex-shrink-0">
                            <img src="<%= guild && guild.iconURL ? guild.iconURL() : 'https://cdn.discordapp.com/embed/avatars/0.png' %>" alt="Server Icon" class="h-10 w-10 rounded-full">
                        </div>
                        <div>
                            <div class="bg-gray-900 rounded-lg p-4 shadow">
                                <h4 class="text-lg font-semibold text-white">Welcome to the Server! ðŸ‘‹</h4>
                                <p class="text-gray-300">
                                    Welcome @User to <strong><%= guild ? guild.name : 'Server' %></strong>!
                                    <br>You are our <%= guild ? guild.memberCount : 'Nth' %> member!
                                </p>
                                <div class="mt-2">
                                    <h5 class="font-medium text-white">Getting Started</h5>
                                    <ul class="list-disc list-inside text-gray-300 text-sm">
                                        <li>Check out our rules channel</li>
                                        <li>Get roles in role-selection</li>
                                        <li>Introduce yourself!</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex justify-end space-x-3">
                <button type="button" onclick="testWelcome()" class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded transition-colors">
                    <i class="fas fa-vial mr-2"></i>
                    Test Message
                </button>
                <button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors">
                    <i class="fas fa-save mr-2"></i>
                    Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Toast container -->
<div id="toast-container" class="fixed bottom-4 right-4 z-50"></div>

<script>
document.getElementById('welcomeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Show saving indicator
    showToast('Saving settings...', 'info');
    
    const form = e.target;
    const formData = new FormData(form);
    const data = {
        welcomeChannel: formData.get('welcomeChannel'),
        autoRole: formData.get('autoRole'),
        _csrf: formData.get('_csrf')
    };

    try {
        const response = await fetch(`/api/guilds/<%= guild ? guild.id : '' %>/settings`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': data._csrf
            },
            body: JSON.stringify({
                welcome_channel_id: data.welcomeChannel,
                auto_role_id: data.autoRole
            })
        });

        const result = await response.json();
        
        if (response.ok) {
            showToast('Settings saved successfully!', 'success');
            // Reload the page after a short delay
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            throw new Error(result.error || 'Failed to save settings');
        }
    } catch (error) {
        showToast(error.message || 'An error occurred while saving settings', 'error');
    }
});

async function testWelcome() {
    const channel = document.querySelector('select[name="welcomeChannel"]').value;
    if (!channel) {
        showToast('Please select a welcome channel first', 'warning');
        return;
    }

    // Show sending indicator
    showToast('Sending test message...', 'info');

    try {
        const response = await fetch(`/api/guilds/<%= guild ? guild.id : '' %>/welcome/test`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': document.querySelector('input[name="_csrf"]').value
            },
            body: JSON.stringify({ channel })
        });

        if (response.ok) {
            const result = await response.json();
            showToast(result.message || 'Test message sent!', 'success');
        } else {
            const error = await response.json();
            throw new Error(error.error || 'Failed to send test message');
        }
    } catch (error) {
        showToast(error.message || 'An error occurred while sending test message', 'error');
    }
}

function showToast(message, type = 'success') {
    // Remove existing toasts
    const existingToasts = document.querySelectorAll('.toast');
    existingToasts.forEach(toast => toast.remove());
    
    // Create new toast
    const toast = document.createElement('div');
    toast.className = `toast px-6 py-3 rounded-lg shadow-lg mb-2 ${
        type === 'success' ? 'bg-green-500' : 
        type === 'error' ? 'bg-red-500' : 
        type === 'info' ? 'bg-blue-500' : 
        'bg-yellow-500'
    } text-white`;
    toast.textContent = message;
    
    // Add to container
    const container = document.getElementById('toast-container');
    container.appendChild(toast);
    
    // Auto remove after delay
    setTimeout(() => {
        toast.classList.add('opacity-0');
        toast.style.transition = 'opacity 0.5s ease';
        setTimeout(() => toast.remove(), 500);
    }, 3000);
}
</script>

<%- include('partials/footer') %>