<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Settings - Discord Bot</title>
    <link href="/css/output.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-900 text-white min-h-screen flex flex-col">
    <%- include('partials/header') %>

    <div class="min-h-screen bg-gray-900 py-8">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="bg-gray-800 rounded-lg shadow-xl p-6">
                <h1 class="text-2xl font-bold text-white mb-6">Server Settings for <%= guild.name %></h1>
                
                <form id="settingsForm" class="space-y-6">
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                    
                    <!-- General Settings -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-white">General Settings</h2>
                        
                        <div>
                            <label for="prefix" class="block text-sm font-medium text-gray-300">Command Prefix</label>
                            <input type="text" id="prefix" name="prefix" value="<%= settings.prefix %>" 
                                class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md shadow-sm py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                    </div>

                    <!-- Channel Settings -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-white">Channel Settings</h2>
                        
                        <div>
                            <label for="welcomeChannel" class="block text-sm font-medium text-gray-300">Welcome Channel</label>
                            <select id="welcomeChannel" name="welcomeChannel" 
                                class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md shadow-sm py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">None</option>
                                <% channels.forEach(channel => { %>
                                    <option value="<%= channel.id %>" <%= settings.welcomeChannel === channel.id ? 'selected' : '' %>>#<%= channel.name %></option>
                                <% }); %>
                            </select>
                            <p class="mt-1 text-sm text-gray-400">Channel where welcome messages will be sent</p>
                        </div>

                        <div>
                            <label for="modLogChannel" class="block text-sm font-medium text-gray-300">Mod Log Channel</label>
                            <select id="modLogChannel" name="modLogChannel" 
                                class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md shadow-sm py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">None</option>
                                <% channels.forEach(channel => { %>
                                    <option value="<%= channel.id %>" <%= settings.modLogChannel === channel.id ? 'selected' : '' %>>#<%= channel.name %></option>
                                <% }); %>
                            </select>
                            <p class="mt-1 text-sm text-gray-400">Channel where moderation actions will be logged</p>
                        </div>
                    </div>

                    <!-- Role Settings -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-white">Role Settings</h2>
                        
                        <div>
                            <label for="autoRole" class="block text-sm font-medium text-gray-300">Auto Role</label>
                            <select id="autoRole" name="autoRole" 
                                class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md shadow-sm py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">None</option>
                                <% roles.forEach(role => { %>
                                    <option value="<%= role.id %>" <%= settings.autoRole === role.id ? 'selected' : '' %>><%= role.name %></option>
                                <% }); %>
                            </select>
                            <p class="mt-1 text-sm text-gray-400">Role automatically assigned to new members</p>
                        </div>
                    </div>

                    <!-- Command Settings -->
                    <div class="space-y-4">
                        <h2 class="text-xl font-semibold text-white">Command Settings</h2>
                        <div class="space-y-2">
                            <% if (settings.commands) { %>
                                <% Object.entries(settings.commands).forEach(([cmdName, cmdSettings]) => { %>
                                    <div class="flex items-center">
                                        <input type="checkbox" id="cmd_<%= cmdName %>" name="commands[<%= cmdName %>][enabled]" 
                                            <%= cmdSettings.enabled ? 'checked' : '' %> value="true"
                                            class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-600 rounded bg-gray-700">
                                        <label for="cmd_<%= cmdName %>" class="ml-2 text-sm text-gray-300"><%= cmdName %></label>
                                    </div>
                                <% }); %>
                            <% } %>
                        </div>
                    </div>

                    <div class="pt-5">
                        <div class="flex justify-end">
                            <button type="submit" 
                                class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Save Changes
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
    document.getElementById('settingsForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const form = e.target;
        const formData = new FormData(form);
        const data = {};
        
        for (const [key, value] of formData.entries()) {
            if (key.startsWith('commands[')) {
                const matches = key.match(/commands\[(.*?)\]\[(.*?)\]/);
                if (matches) {
                    const [, cmdName, prop] = matches;
                    data.commands = data.commands || {};
                    data.commands[cmdName] = data.commands[cmdName] || {};
                    data.commands[cmdName][prop] = value === 'true';
                }
            } else {
                data[key] = value;
            }
        }

        try {
            const response = await fetch(form.action || window.location.href, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'CSRF-Token': formData.get('_csrf')
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            
            if (response.ok) {
                showToast(result.message, 'success');
            } else {
                throw new Error(result.error || 'Failed to save settings');
            }
        } catch (error) {
            showToast(error.message, 'error');
        }
    });

    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.className = `fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg ${
            type === 'success' ? 'bg-green-500' : 'bg-red-500'
        } text-white`;
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }
    </script>

    <%- include('partials/footer') %>
</body>
</html> 